[{"/home/danilo/Desktop/polovnjaci_app_fe/src/index.js":"1","/home/danilo/Desktop/polovnjaci_app_fe/src/reportWebVitals.js":"2","/home/danilo/Desktop/polovnjaci_app_fe/src/App.js":"3","/home/danilo/Desktop/polovnjaci_app_fe/src/services/authService.js":"4","/home/danilo/Desktop/polovnjaci_app_fe/src/components/singleCar/SingleCarGallery.js":"5","/home/danilo/Desktop/polovnjaci_app_fe/src/components/appCars/AppCars.js":"6","/home/danilo/Desktop/polovnjaci_app_fe/src/components/homePage/HomePage.js":"7","/home/danilo/Desktop/polovnjaci_app_fe/src/components/loginForm/LoginForm.js":"8","/home/danilo/Desktop/polovnjaci_app_fe/src/components/singleCar/SingleCar.js":"9","/home/danilo/Desktop/polovnjaci_app_fe/src/components/singleAuthorCars/SingleAuthorCars.js":"10","/home/danilo/Desktop/polovnjaci_app_fe/src/components/RegisterForm/RegisterForm.js":"11","/home/danilo/Desktop/polovnjaci_app_fe/src/components/addNewCar/AddNewCar.js":"12","/home/danilo/Desktop/polovnjaci_app_fe/src/components/editSingleCar/EditSingleCar.js":"13","/home/danilo/Desktop/polovnjaci_app_fe/src/services/apiService.js":"14","/home/danilo/Desktop/polovnjaci_app_fe/src/services/carService.js":"15","/home/danilo/Desktop/polovnjaci_app_fe/src/services/addNewCarService.js":"16","/home/danilo/Desktop/polovnjaci_app_fe/src/services/carBrands.js":"17"},{"size":628,"mtime":1691677141993,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1683379183597,"results":"20","hashOfConfig":"19"},{"size":3234,"mtime":1707939818739,"results":"21","hashOfConfig":"19"},{"size":1018,"mtime":1701716985103,"results":"22","hashOfConfig":"19"},{"size":1411,"mtime":1707939237600,"results":"23","hashOfConfig":"19"},{"size":1511,"mtime":1707936217655,"results":"24","hashOfConfig":"19"},{"size":265,"mtime":1707936697458,"results":"25","hashOfConfig":"19"},{"size":2666,"mtime":1707937177846,"results":"26","hashOfConfig":"19"},{"size":4329,"mtime":1707939670201,"results":"27","hashOfConfig":"19"},{"size":1612,"mtime":1707936270880,"results":"28","hashOfConfig":"19"},{"size":4128,"mtime":1707937250359,"results":"29","hashOfConfig":"19"},{"size":17337,"mtime":1707936342481,"results":"30","hashOfConfig":"19"},{"size":17228,"mtime":1707936366313,"results":"31","hashOfConfig":"19"},{"size":424,"mtime":1701524595929,"results":"32","hashOfConfig":"19"},{"size":439,"mtime":1701853550783,"results":"33","hashOfConfig":"19"},{"size":479,"mtime":1701771139131,"results":"34","hashOfConfig":"19"},{"size":16625,"mtime":1704885148769,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"1mpozm3",{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"39"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"39"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"39"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"39"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"/home/danilo/Desktop/polovnjaci_app_fe/src/index.js",[],[],[],"/home/danilo/Desktop/polovnjaci_app_fe/src/reportWebVitals.js",[],[],"/home/danilo/Desktop/polovnjaci_app_fe/src/App.js",["92","93","94","95"],[],"/home/danilo/Desktop/polovnjaci_app_fe/src/services/authService.js",[],[],"/home/danilo/Desktop/polovnjaci_app_fe/src/components/singleCar/SingleCarGallery.js",["96"],[],"/home/danilo/Desktop/polovnjaci_app_fe/src/components/appCars/AppCars.js",["97"],[],"import React, { useEffect, useState } from 'react'\nimport \"./AppCars.scss\";\nimport { getAllCars } from '../../services/carService';\nimport { Link, useNavigate } from 'react-router-dom';\n\nconst AppCars = () => {\n    const [cars, setCars] = useState([]);\n\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const getCars = async () => {\n            const {data} = await getAllCars()\n\n            setCars(data);\n        }\n        getCars()\n    }, [])\n\n  return (\n    <>\n        {/* <h1>Gallery</h1> */}\n        <div className='cars-container'>\n            {\n                cars.length !== 0 &&\n                cars.map((car,index) => (\n                    <div className='card-container'>\n                    <div className='card__footer'>\n                            <h3>{ car.brand + \" \" + car.model }</h3>\n                    </div>\n                    <Link to={`/cars/${car._id}`} key={index} className='card'>\n                        <div className='card__image'>\n                            <img className='card__image__background' src={car.images.length && `http://localhost:8000/` + car.images[0].path} alt='Car image' />\n                        </div>\n                    </Link>\n                    </div>\n                )) \n            }\n\n            {\n                cars.length === 0 && <h1>Nema oglasa!</h1>\n            }\n        </div>\n        <button onClick={() => navigate(\"/\")} class=\"close btn--back\">\n        <p>Back</p>\n    </button>\n    </>\n  )\n}\n\nexport default AppCars\n","/home/danilo/Desktop/polovnjaci_app_fe/src/components/homePage/HomePage.js",[],[],"/home/danilo/Desktop/polovnjaci_app_fe/src/components/loginForm/LoginForm.js",[],[],"/home/danilo/Desktop/polovnjaci_app_fe/src/components/singleCar/SingleCar.js",["98"],[],"/home/danilo/Desktop/polovnjaci_app_fe/src/components/singleAuthorCars/SingleAuthorCars.js",["99","100"],[],"import React, { useEffect, useState } from 'react'\nimport \"../appCars/AppCars.scss\";\nimport { getAllCars } from '../../services/carService';\nimport { Link, useNavigate, useParams } from 'react-router-dom';\n\nconst SingleAuthorCars = () => {\n    const [cars, setCars] = useState([]);\n    const {authorId} = useParams();\n\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const getCars = async () => {\n            const {data} = await getAllCars()\n            const authorsCars = data && data.filter((car) => car.author_id === authorId)\n            setCars(authorsCars);\n        }\n        getCars()\n    }, [])\n\n    const author = cars.filter((car) => car.author_id === authorId)\n\n    console.log(\"author cars: \", author)\n\n  return (\n    <>\n        <h1>Pogledaj sve oglase prodavca { author.length && author[0].author } </h1>\n        <div className='cars-container'>\n            {\n                cars && \n                cars.map((car,index) => (\n                    <Link to={`/cars/${car._id}`} key={index} className='card'>\n                        <div className='card__image'>\n                        <img src={`http://localhost:8000/` + car.images[0].path} alt='Car image' />\n                        </div>\n                        <div className='card__footer'>\n                            <h3>{ car.brand + \" \" + car.model }</h3>\n                        </div>\n                    </Link>\n                ))\n            }\n        </div>\n        <button onClick={() => navigate(\"/cars\")} class=\"close btn--back\">\n        <p>Back</p>\n    </button>\n    </>\n  )\n}\n\nexport default SingleAuthorCars","/home/danilo/Desktop/polovnjaci_app_fe/src/components/RegisterForm/RegisterForm.js",[],[],"/home/danilo/Desktop/polovnjaci_app_fe/src/components/addNewCar/AddNewCar.js",["101"],[],"import React, { useEffect, useState } from 'react'\nimport \"./AddNewCar.scss\";\nimport { useNavigate } from 'react-router';\nimport { addNewCarService } from '../../services/addNewCarService';\nimport { carBrands } from '../../services/carBrands';\n\nconst AddNewCar = ({ activeUser }) => {\n  const fuelOptions = [\"\",\"petrol\", \"diesel\", \"electric\", \"gas\", \"other\"];\n  const years = [\"\"];\n  const doors = [\"\", 3, 4, 5];\n  const transmitions = [\"\", \"Manual 4 gears\", \"Manual 5 gears\", \"Manual 6 gears\", \"Authomatic\", \"Semi-authomatic\"];\n  const car_body = [\"\", \"Limuzina\", \"Hečbek\", \"Karavan\", \"Kupe\", \"Kabriolet/Roadster\", \"Monovolumen (MiniVan)\", \"Džip/SUV\", \"Pick up\"];\n  const replacement = [\"\", \"Bez zamene\", \"Zamena za jeftinije\", \"U istoj ceni\", \"Zamena za skuplje\", \"Svejedno\"];\n  const drive = [\"\", \"Prednji\", \"Zadnji\", \"4x4\"];\n  const seats = [\"\", \"2 sedišta\", \"3 sedišta\", \"4 sedišta\", \"5 sedišta\", \"6 sedišta\", \"7 sedišta\", \"8 sedišta\", \"9 sedišta\"];\n  const wheel_side = [\"\", \"Levi volan\", \"Desni volan\"];\n  const climatronic_options = [\"\", \"Nema klime\", \"Manualna klima\", \"Automatska klima\"];\n  const colors = [\"\", \"Bela\", \"Bež\", \"Bordo\", \"Braon\", \"Crna\", \"Crvena\", \"Kameleon\", \"Krem\", \"Ljubičasta\", \"Narandžasta\", \"Plava\", \"Siva\", \"Smeđa\", \"Srebrna\", \"Tirkiz\", \"Teget\", \"Zelena\", \"Zlatna\", \"Žuta\"];\n\n  for (let i = 1975; i <= 2022; i++) {\n    years.push(i);\n}\n\n  useEffect(() => {\n    setBrands(carBrands)\n  }, [])\n\nconst navigate = useNavigate();\n\nconst [brands, setBrands] = useState([\"\"])\nconst [brand, setBrand] = useState(\"\");\n\n\nconst filteredBrand = brands.filter(item => item.brand === brand);\n\nconst [newCar, setNewCar] = useState({\n    brand : \"\",\n    model: \"\",\n    production_year: \"\",\n    car_body : \"\",\n    fuel: \"\",\n    number_of_doors: \"\",\n    price : \"\",\n    mileage : \"\",\n    replacement : \"\",\n    cubic_capacity : \"\",\n    drive : \"\",\n    horse_power: \"\",\n    transmition: \"\",\n    number_of_seats : \"\",\n    steering_wheel_side : \"\",\n    climatronic : \"\",\n    color : \"\",\n    registered_until : \"\",\n    security : [],\n    equipment : [],\n    description: \"\",\n    author: \"\",\n    phone: \"\",\n    city: \"\"\n})\n\nconst [carImages, setCarImages] = useState(null)\n\nconst form = new FormData();\n\nconst onInputChange = (e) => {\n  const arr = Array.from(e.target.files)\n    setCarImages(arr)\n}\n\n\n\nconst handleSubmit = async (e) => {\n  e.preventDefault();\n  \n  form.append(\"brand\", newCar.brand);\n  form.append(\"model\", newCar.model);\n  form.append(\"production_year\", newCar.production_year);\n  form.append(\"car_body\", newCar.car_body);\n  form.append(\"fuel\", newCar.fuel);\n  form.append(\"number_of_doors\", newCar.number_of_doors);\n  form.append(\"price\", newCar.price);\n  form.append(\"mileage\", newCar.mileage);\n  form.append(\"replacement\", newCar.replacement);\n  form.append(\"cubic_capacity\", newCar.cubic_capacity);\n  form.append(\"drive\", newCar.drive);\n  form.append(\"horse_power\", newCar.horse_power);\n  form.append(\"transmition\", newCar.transmition);\n  form.append(\"number_of_seats\", newCar.number_of_seats);\n  form.append(\"steering_wheel_side\", newCar.steering_wheel_side);\n  form.append(\"climatronic\", newCar.climatronic);\n  form.append(\"color\", newCar.color);\n  form.append(\"registered_until\", newCar.registered_until);\n  form.append(\"security\", newCar.security);\n  form.append(\"equipment\", newCar.equipment);\n  form.append(\"description\", newCar.description);\n  form.append(\"author\", activeUser.first_name);\n  form.append(\"phone\", activeUser.phone);\n  form.append(\"city\", activeUser.city);\n  form.append(\"author_id\", activeUser._id);\n\n  if(carImages !== null) {\n    for (let i = 0; i < carImages.length; i++) {\n      const file = carImages[i];\n      form.append(\"images\", file)\n    }\n  }\n  \n\n  const data = await addNewCarService(form)\n\n  navigate(\"/cars\")\n}\n\nif(brands[0] !== \"\") {\n  brands.unshift(\"\")\n}\n\nif(filteredBrand[0] && filteredBrand[0].models[0] !== \"\") {\n  filteredBrand[0].models.unshift(\"\")\n}\n\nif(!localStorage.getItem(\"user\")) navigate(\"/login\")\n\nconsole.log(\"BRANDS: \", newCar)\n\n\n  return (\n    <div className='add-car-form-container'>\n        <div className=\"main\">  \t\n\t\t<input type=\"checkbox\" id=\"chk\" aria-hidden=\"true\" />\n\n\t\t\t<div className=\"add-car\">\n\t\t\t\t<form onSubmit={handleSubmit} encType='multipart/form-data'>\n\n                    {/* brand list start */}\n                    <span className='input-label'>Brand: </span>\n                    <select\n                    className=\"input\" \n                    required\n                    name='brand'\n                    onChange={({ target }) => {\n                      setBrand(target.value)\n                      setNewCar({ ...newCar, brand : target.value })\n                    }\n                    }\n                    >\n                      {\n                        brands && brands.map((brand,index) => (\n                          <option key={index} value={brand.brand}>{brand.brand}</option>\n                        ))\n                      }\n                    </select>\n                    {/* brand list end */}\n\n                    {/* models list start */}\n                    <span className='input-label'>Model: </span>\n                    <select\n                    className=\"input\" \n                    required\n                    name='model'\n                    onChange={({ target }) => {\n                      setNewCar({ ...newCar, model : target.value })\n                    }\n                    \n                    }\n                    >\n                      {\n                        filteredBrand[0] && filteredBrand[0].models.map((model,index) => (\n                          <option key={index} value={model}>{model}</option>\n                        ))\n                      }\n                    </select>\n                    {/* models list end */}\n\n\n                    {/* year start */}\n                    <span className='input-label'>Godina proizvodnje: </span>\n                    <select\n                    className=\"input\" \n                    required\n                    name='production_year'\n                    onChange={({ target }) =>\n                    setNewCar({ ...newCar, production_year : target.value })\n                    }\n                    >\n                      {\n                        years.map((year,index) => (\n                          <option key={index} value={year}>{year}</option>\n                        ))\n                      }\n                    </select>\n                    {/* year end */}\n\n                    {/* car_body start */}\n                    <span className='input-label'>Karoserija: </span>\n                    <select\n                    className=\"input\" \n                    name='car_body'\n                    required\n                    onChange={({ target }) =>\n                    setNewCar({ ...newCar, car_body : target.value })\n                    }\n                    >\n                      {\n                        car_body.map((item,index) => (\n                          <option key={index} value={item}>{item}</option>\n                        ))\n                      }\n                    </select>\n                    {/* car_body end */}\n\n                    {/* price start */}\n                    <span className='input-label'>Cena: </span>\n                    <input \n                    required\n                    type=\"text\" \n                    name=\"price\" \n                    placeholder=\"Cena\"\n                    className=\"input\" \n                    onChange={({ target }) =>\n                    setNewCar({ ...newCar, price : target.value })\n                    }\n                    />\n                    {/* price end */}\n\n                    {/* mileage start */}\n                    <span className='input-label'>Kilometraža: </span>\n                    <input \n                    required\n                    type=\"text\" \n                    name=\"mileage\" \n                    placeholder=\"Kilometraža\"\n                    className=\"input\" \n                    onChange={({ target }) =>\n                    setNewCar({ ...newCar, mileage : target.value })\n                    }\n                    />\n                    {/* mileage end */}\n\n                    {/* replacement start */}\n                    <span className='input-label'>Zamena: </span>\n                    <select\n                    required\n                    className=\"input\" \n                    name='replacement'\n                    onChange={({ target }) =>\n                    setNewCar({ ...newCar, replacement : target.value })\n                    }\n                    >\n                      {\n                        replacement.map((item,index) => (\n                          <option key={index} value={item}>{item}</option>\n                        ))\n                      }\n                    </select>\n                    {/* replacement end */}\n\n                    {/* fuel start */}\n                    <span className='input-label'>Vrsta goriva: </span>\n                    <select\n                    className=\"input\" \n                    name='fuel'\n                    required\n                    onChange={({ target }) =>\n                    setNewCar({ ...newCar, fuel : target.value })\n                    }\n                    >\n                      {\n                        fuelOptions.map((option,index) => (\n                          <option key={index}>{option}</option>\n                        ))\n                      }\n                    </select>\n                    {/*  fuel end */}\n\n                    {/* cubic_capacity start */}\n                    <span className='input-label'>Kubikaža: </span>\n                    <input \n                    type=\"text\" \n                    name=\"cubic_capacity\" \n                    placeholder=\"Kubikaža\" \n                    required \n                    className=\"input\" \n                    onChange={({ target }) =>\n                    setNewCar({ ...newCar, cubic_capacity : target.value })\n                    }\n                    />\n                    {/* cubic_capacity end */}\n\n                    {/* doors start */}\n                    <span className='input-label'>Broj vrata: </span>\n                    <select\n                    className=\"input\" \n                    name='number_of_doors'\n                    required\n                    onChange={({ target }) =>\n                    setNewCar({ ...newCar, number_of_doors : target.value })\n                    }\n                    >\n                      {\n                        doors.map((door,index) => (\n                          <option key={index}>{door}</option>\n                        ))\n                      }\n                    </select>\n                    {/* doors end */}\n\n                    {/* horse_power start */}\n                    <span className='input-label'>Konjske snage: </span>\n                    <input \n                    type=\"text\" \n                    name=\"horse_power\" \n                    placeholder=\"Snaga motora(konjske snage)\" \n                    required\n                    className=\"input\" \n                    onChange={({ target }) =>\n                    setNewCar({ ...newCar, horse_power : target.value })\n                    }\n                    />\n                    {/* horse_power end */}\n\n                    {/* drive (pogon) start */}\n                    <span className='input-label'>Pogon: </span>\n                      <select\n                        className=\"input\" \n                        name='drive'\n                        required\n                        onChange={({ target }) =>\n                        setNewCar({ ...newCar, drive : target.value })\n                        }\n                        >\n                          {\n                            drive.map((item,index) => (\n                              <option key={index} value={item}>{item}</option>\n                            ))\n                          }\n                      </select>\n                    {/* drive (pogon) end */}\n\n                    {/* transmition start */}\n                    <span className='input-label'>Menjač: </span>\n                    <select\n                    className=\"input\" \n                    name='transmition'\n                    required\n                    onChange={({ target }) =>\n                    setNewCar({ ...newCar, transmition : target.value })\n                    }\n                    >\n                      {\n                        transmitions.map((transmition,index) => (\n                          <option key={index} value={transmition}>{transmition}</option>\n                        ))\n                      }\n                    </select>\n                    {/* transmition end */}\n\n                    {/* number_of_seats start */}\n                    <span className='input-label'>Broj sedišta: </span>\n                    <select\n                    className=\"input\" \n                    name='number_of_seats'\n                    required\n                    onChange={({ target }) =>\n                    setNewCar({ ...newCar, number_of_seats : target.value })\n                    }\n                    >\n                      {\n                        seats.map((item,index) => (\n                          <option key={index} value={item}>{item}</option>\n                        ))\n                      }\n                    </select>\n                    {/* number_of_seats end end */}\n\n                    {/* steering_wheel_side start */}\n                    <span className='input-label'>Strana volana: </span>\n                    <select\n                    className=\"input\" \n                    name='steering_wheel_side'\n                    required\n                    onChange={({ target }) =>\n                    setNewCar({ ...newCar, steering_wheel_side : target.value })\n                    }\n                    >\n                      {\n                        wheel_side.map((item,index) => (\n                          <option key={index} value={item}>{item}</option>\n                        ))\n                      }\n                    </select>\n                    {/* steering_wheel_side end */}\n\n                    {/* climatronic start */}\n                    <span className='input-label'>Klima: </span>\n                    <select\n                    className=\"input\" \n                    name='climatronic'\n                    required\n                    onChange={({ target }) =>\n                    setNewCar({ ...newCar, climatronic : target.value })\n                    }\n                    >\n                      {\n                        climatronic_options.map((item,index) => (\n                          <option key={index} value={item}>{item}</option>\n                        ))\n                      }\n                    </select>\n                    {/* climatronic end */}\n\n                    {/* color start */}\n                    <span className='input-label'>Boja vozila: </span>\n                    <select\n                    className=\"input\" \n                    name='color'\n                    required\n                    onChange={({ target }) =>\n                    setNewCar({ ...newCar, color : target.value })\n                    }\n                    >\n                      {\n                        colors.map((item,index) => (\n                          <option key={index} value={item}>{item}</option>\n                        ))\n                      }\n                    </select>\n                    {/* color end */}\n\n                    {/* registered_until start */}\n                    {/* <span className='input-label'>Registrovan do: </span>\n                    <input \n                    type='date' \n                    name=\"registered_until\" \n                    placeholder=\"Registrovan do\" \n                    // required \n                    className=\"input\" \n                    onChange={({ target }) =>\n                    setNewCar({ ...newCar, registered_until : target.value })\n                    }\n                    /> */}\n                    {/* registered_until end */}\n\n                    {/* description start */}\n                    <span className='input-label'>Opis: </span>\n                    <textarea \n                    className='input' \n                    required\n                    placeholder='Opis'\n                    onChange={({ target }) =>\n                    setNewCar({ ...newCar, description : target.value })\n                    }\n                    ></textarea>\n                    {/* description end */}\n\n                    {/* images start */}\n                    <span className='input-label'>Dodaj slike: </span>\n                    {\n                        <input \n                        type='file' \n                        multiple\n                        required\n                        placeholder='Dodaj sliku' \n                        name='images' \n                        className=\"input\"\n                        onChange={(e) => onInputChange(e)}\n                        />\n                    }\n                    {/* images end */}\n\t\t\t\t\t<button type='submit' className='btn--add'>Add</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t</div>\n    </div>\n  )\n}\n\nexport default AddNewCar","/home/danilo/Desktop/polovnjaci_app_fe/src/components/editSingleCar/EditSingleCar.js",["102","103","104","105"],[],"import React, { useEffect, useState } from 'react'\nimport \"../addNewCar/AddNewCar.scss\";\nimport { useNavigate, useParams } from 'react-router';\nimport { EditCar } from '../../services/addNewCarService';\nimport { getSingleCar } from '../../services/carService';\n\nconst EditSingleCar = ({ activeUser }) => {\n  const fuelOptions = [\"\",\"petrol\", \"diesel\", \"electric\", \"gas\", \"other\"];\n  const years = [\"\"];\n  const doors = [\"\", 3, 4, 5];\n  const transmitions = [\"\", \"Manual 4 gears\", \"Manual 5 gears\", \"Manual 6 gears\", \"Authomatic\", \"Semi-authomatic\"];\n  const car_body = [\"\", \"Limuzina\", \"Hečbek\", \"Karavan\", \"Kupe\", \"Kabriolet/Roadster\", \"Monovolumen (MiniVan)\", \"Džip/SUV\", \"Pick up\"];\n  const replacement = [\"\", \"Bez zamene\", \"Zamena za jeftinije\", \"U istoj ceni\", \"Zamena za skuplje\", \"Svejedno\"];\n  const drive = [\"\", \"Prednji\", \"Zadnji\", \"4x4\"];\n  const seats = [\"\", \"2 sedišta\", \"3 sedišta\", \"4 sedišta\", \"5 sedišta\", \"6 sedišta\", \"7 sedišta\", \"8 sedišta\", \"9 sedišta\"];\n  const wheel_side = [\"\", \"Levi volan\", \"Desni volan\"];\n  const climatronic_options = [\"\", \"Nema klime\", \"Manualna klima\", \"Automatska klima\"];\n  const colors = [\"\", \"Bela\", \"Bež\", \"Bordo\", \"Braon\", \"Crna\", \"Crvena\", \"Kameleon\", \"Krem\", \"Ljubičasta\", \"Narandžasta\", \"Plava\", \"Siva\", \"Smeđa\", \"Srebrna\", \"Tirkiz\", \"Teget\", \"Zelena\", \"Zlatna\", \"Žuta\"];\n\n  for (let i = 1975; i <= 2022; i++) {\n    years.push(i);\n}\n\nconst { carId } = useParams()\n\nconst [car, setCar] = useState({})\n\nuseEffect(() => {\n  if(carId) {\n    const getCar = async () => {\n      const {data} = await getSingleCar(carId);\n\n      setNewCar({\n        brand : data.brand,\n        model: data.model,\n        production_year: data.production_year,\n        car_body : data.car_body,\n        fuel: data.fuel,\n        number_of_doors: data.number_of_doors,\n        price : data.price,\n        mileage : data.mileage,\n        replacement : data.replacement,\n        cubic_capacity : data.cubic_capacity,\n        drive : data.drive,\n        horse_power: data.horse_power,\n        transmition: data.transmition,\n        number_of_seats : data.number_of_seats,\n        steering_wheel_side : data.steering_wheel_side,\n        climatronic : data.climatronic,\n        color : data.color,\n        registered_until : data.registered_until,\n        security : data.security,\n        equipment : data.equipment,\n        description: data.description,\n        author: data.author,\n        phone: data.phone,\n        city: data.city\n      })\n  }\n\n  getCar();\n  }\n}, [carId])\n\nconst navigate = useNavigate();\n\nconst [carImages, setCarImages] = useState(null)\n\nconst form = new FormData();\n\nconst onInputChange = (e) => {\n  const arr = Array.from(e.target.files)\n    setCarImages(arr)\n}\n\nconst [newCar, setNewCar] = useState({})\n\n\nconst handleSubmit = async (e) => {\n  e.preventDefault();\n  \n  form.set(\"brand\", newCar.brand);\n  form.set(\"model\", newCar.model);\n  form.set(\"production_year\", newCar.production_year);\n  form.set(\"car_body\", newCar.car_body);\n  form.set(\"fuel\", newCar.fuel);\n  form.set(\"number_of_doors\", newCar.number_of_doors);\n  form.set(\"price\", newCar.price);\n  form.set(\"mileage\", newCar.mileage);\n  form.set(\"replacement\", newCar.replacement);\n  form.set(\"cubic_capacity\", newCar.cubic_capacity);\n  form.set(\"drive\", newCar.drive);\n  form.set(\"horse_power\", newCar.horse_power);\n  form.set(\"transmition\", newCar.transmition);\n  form.set(\"number_of_seats\", newCar.number_of_seats);\n  form.set(\"steering_wheel_side\", newCar.steering_wheel_side);\n  form.set(\"climatronic\", newCar.climatronic);\n  form.set(\"color\", newCar.color);\n  form.set(\"registered_until\", newCar.registered_until);\n  form.set(\"security\", newCar.security);\n  form.set(\"equipment\", newCar.equipment);\n  form.set(\"description\", newCar.description);\n  form.set(\"author\", activeUser.first_name);\n  form.set(\"phone\", activeUser.phone);\n  form.set(\"city\", activeUser.city);\n  form.set(\"author_id\", activeUser._id);\n\n  if(carImages !== null) {\n    for (let i = 0; i < carImages.length; i++) {\n      const file = carImages[i];\n      form.set(\"images\", file)\n    }\n  }\n  \n\n  const data = await EditCar(form, carId)\n\n  navigate(\"/cars\")\n}\n\nif(!localStorage.getItem(\"user\")) navigate(\"/login\")\n\n  return (\n    <div className='add-car-form-container'>\n        <div className=\"main\">  \t\n\t\t<input type=\"checkbox\" id=\"chk\" aria-hidden=\"true\" />\n\n\t\t\t<div className=\"add-car\">\n\t\t\t\t<form onSubmit={handleSubmit} encType='multipart/form-data'>\n        <span className='input-label'>Marka: </span>\n\t\t\t\t\t          <input \n                    type=\"text\" \n                    value={newCar.brand}\n                    name=\"brand\" \n                    placeholder=\"Marka\" \n                    required\n                    className=\"input\" \n                    onChange={({ target }) =>\n                    setNewCar({ ...newCar, brand : target.value })\n                    }\n                    />\n                    {/* brand end */}\n\n                    {/* model start */}\n                    <span className='input-label'>Model: </span>\n                    <input \n                    type=\"text\" \n                    name=\"model\"\n                    value={newCar.model} \n                    placeholder=\"Model\" \n                    required\n                    className=\"input\" \n                    onChange={({ target }) =>\n                    setNewCar({ ...newCar, model : target.value })\n                    }\n                    />\n                    {/* model end */}\n\n                    {/* year start */}\n                    <span className='input-label'>Godina proizvodnje: </span>\n                    <select\n                    className=\"input\" \n                    value={newCar.production_year}\n                    required\n                    name='production_year'\n                    onChange={({ target }) =>\n                    setNewCar({ ...newCar, production_year : target.value })\n                    }\n                    >\n                      {\n                        years.map((year,index) => (\n                          <option key={index} value={year}>{year}</option>\n                        ))\n                      }\n                    </select>\n                    {/* year end */}\n\n                    {/* car_body start */}\n                    <span className='input-label'>Karoserija: </span>\n                    <select\n                    className=\"input\" \n                    value={newCar.car_body}\n                    name='car_body'\n                    required\n                    onChange={({ target }) =>\n                    setNewCar({ ...newCar, car_body : target.value })\n                    }\n                    >\n                      {\n                        car_body.map((item,index) => (\n                          <option key={index} value={item}>{item}</option>\n                        ))\n                      }\n                    </select>\n                    {/* car_body end */}\n\n                    {/* price start */}\n                    <span className='input-label'>Cena: </span>\n                    <input \n                    required\n                    value={newCar.price}\n                    type=\"text\" \n                    name=\"price\" \n                    placeholder=\"Cena\"\n                    className=\"input\" \n                    onChange={({ target }) =>\n                    setNewCar({ ...newCar, price : target.value })\n                    }\n                    />\n                    {/* price end */}\n\n                    {/* mileage start */}\n                    <span className='input-label'>Kilometraža: </span>\n                    <input \n                    required\n                    type=\"text\" \n                    name=\"mileage\" \n                    value={newCar.mileage}\n                    placeholder=\"Kilometraža\"\n                    className=\"input\" \n                    onChange={({ target }) =>\n                    setNewCar({ ...newCar, mileage : target.value })\n                    }\n                    />\n                    {/* mileage end */}\n\n                    {/* replacement start */}\n                    <span className='input-label'>Zamena: </span>\n                    <select\n                    required\n                    value={newCar.replacement}\n                    className=\"input\" \n                    name='replacement'\n                    onChange={({ target }) =>\n                    setNewCar({ ...newCar, replacement : target.value })\n                    }\n                    >\n                      {\n                        replacement.map((item,index) => (\n                          <option key={index} value={item}>{item}</option>\n                        ))\n                      }\n                    </select>\n                    {/* replacement end */}\n\n                    {/* fuel start */}\n                    <span className='input-label'>Vrsta goriva: </span>\n                    <select\n                    className=\"input\" \n                    value={newCar.fuel}\n                    name='fuel'\n                    required\n                    onChange={({ target }) =>\n                    setNewCar({ ...newCar, fuel : target.value })\n                    }\n                    >\n                      {\n                        fuelOptions.map((option,index) => (\n                          <option key={index}>{option}</option>\n                        ))\n                      }\n                    </select>\n                    {/*  fuel end */}\n\n                    {/* cubic_capacity start */}\n                    <span className='input-label'>Kubikaža: </span>\n                    <input \n                    type=\"text\" \n                    value={newCar.cubic_capacity}\n                    name=\"cubic_capacity\" \n                    placeholder=\"Kubikaža\" \n                    required \n                    className=\"input\" \n                    onChange={({ target }) =>\n                    setNewCar({ ...newCar, cubic_capacity : target.value })\n                    }\n                    />\n                    {/* cubic_capacity end */}\n\n                    {/* doors start */}\n                    <span className='input-label'>Broj vrata: </span>\n                    <select\n                    className=\"input\" \n                    value={newCar.number_of_doors}\n                    name='number_of_doors'\n                    required\n                    onChange={({ target }) =>\n                    setNewCar({ ...newCar, number_of_doors : target.value })\n                    }\n                    >\n                      {\n                        doors.map((door,index) => (\n                          <option key={index}>{door}</option>\n                        ))\n                      }\n                    </select>\n                    {/* doors end */}\n\n                    {/* horse_power start */}\n                    <span className='input-label'>Konjske snage: </span>\n                    <input \n                    type=\"text\" \n                    value={newCar.horse_power}\n                    name=\"horse_power\" \n                    placeholder=\"Snaga motora(konjske snage)\" \n                    required\n                    className=\"input\" \n                    onChange={({ target }) =>\n                    setNewCar({ ...newCar, horse_power : target.value })\n                    }\n                    />\n                    {/* horse_power end */}\n\n                    {/* drive (pogon) start */}\n                    <span className='input-label'>Pogon: </span>\n                      <select\n                        className=\"input\" \n                        value={newCar.drive}\n                        name='drive'\n                        required\n                        onChange={({ target }) =>\n                        setNewCar({ ...newCar, drive : target.value })\n                        }\n                        >\n                          {\n                            drive.map((item,index) => (\n                              <option key={index} value={item}>{item}</option>\n                            ))\n                          }\n                      </select>\n                    {/* drive (pogon) end */}\n\n                    {/* transmition start */}\n                    <span className='input-label'>Menjač: </span>\n                    <select\n                    value={newCar.transmition}\n                    className=\"input\" \n                    name='transmition'\n                    required\n                    onChange={({ target }) =>\n                    setNewCar({ ...newCar, transmition : target.value })\n                    }\n                    >\n                      {\n                        transmitions.map((transmition,index) => (\n                          <option key={index} value={transmition}>{transmition}</option>\n                        ))\n                      }\n                    </select>\n                    {/* transmition end */}\n\n                    {/* number_of_seats start */}\n                    <span className='input-label'>Broj sedišta: </span>\n                    <select\n                    className=\"input\" \n                    value={newCar.number_of_seats}\n                    name='number_of_seats'\n                    required\n                    onChange={({ target }) =>\n                    setNewCar({ ...newCar, number_of_seats : target.value })\n                    }\n                    >\n                      {\n                        seats.map((item,index) => (\n                          <option key={index} value={item}>{item}</option>\n                        ))\n                      }\n                    </select>\n                    {/* number_of_seats end end */}\n\n                    {/* steering_wheel_side start */}\n                    <span className='input-label'>Strana volana: </span>\n                    <select\n                    className=\"input\" \n                    value={newCar.steering_wheel_side}\n                    name='steering_wheel_side'\n                    required\n                    onChange={({ target }) =>\n                    setNewCar({ ...newCar, steering_wheel_side : target.value })\n                    }\n                    >\n                      {\n                        wheel_side.map((item,index) => (\n                          <option key={index} value={item}>{item}</option>\n                        ))\n                      }\n                    </select>\n                    {/* steering_wheel_side end */}\n\n                    {/* climatronic start */}\n                    <span className='input-label'>Klima: </span>\n                    <select\n                    value={newCar.climatronic}\n                    className=\"input\" \n                    name='climatronic'\n                    required\n                    onChange={({ target }) =>\n                    setNewCar({ ...newCar, climatronic : target.value })\n                    }\n                    >\n                      {\n                        climatronic_options.map((item,index) => (\n                          <option key={index} value={item}>{item}</option>\n                        ))\n                      }\n                    </select>\n                    {/* climatronic end */}\n\n                    {/* color start */}\n                    <span className='input-label'>Boja vozila: </span>\n                    <select\n                    value={newCar.color}\n                    className=\"input\" \n                    name='color'\n                    required\n                    onChange={({ target }) =>\n                    setNewCar({ ...newCar, color : target.value })\n                    }\n                    >\n                      {\n                        colors.map((item,index) => (\n                          <option key={index} value={item}>{item}</option>\n                        ))\n                      }\n                    </select>\n                    {/* color end */}\n\n                    {/* registered_until start */}\n                    {/* <span className='input-label'>Registrovan do: </span>\n                    <input \n                    type='date' \n                    name=\"registered_until\" \n                    placeholder=\"Registrovan do\" \n                    // required \n                    className=\"input\" \n                    onChange={({ target }) =>\n                    setNewCar({ ...newCar, registered_until : target.value })\n                    }\n                    /> */}\n                    {/* registered_until end */}\n\n                    {/* description start */}\n                    <span className='input-label'>Opis: </span>\n                    <textarea \n                    className='input' \n                    value={newCar.description}\n                    required\n                    placeholder='Opis'\n                    onChange={({ target }) =>\n                    setNewCar({ ...newCar, description : target.value })\n                    }\n                    ></textarea>\n                    {/* description end */}\n\t\t\t\t\t<button type='submit' className='btn--add'>Edit</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t</div>\n    </div>\n  )\n}\n\nexport default EditSingleCar","/home/danilo/Desktop/polovnjaci_app_fe/src/services/apiService.js",[],[],"/home/danilo/Desktop/polovnjaci_app_fe/src/services/carService.js",[],[],"/home/danilo/Desktop/polovnjaci_app_fe/src/services/addNewCarService.js",[],[],"/home/danilo/Desktop/polovnjaci_app_fe/src/services/carBrands.js",[],[],{"ruleId":"106","severity":1,"message":"107","line":2,"column":16,"nodeType":"108","messageId":"109","endLine":2,"endColumn":22},{"ruleId":"106","severity":1,"message":"110","line":7,"column":17,"nodeType":"108","messageId":"109","endLine":7,"endColumn":25},{"ruleId":"106","severity":1,"message":"111","line":7,"column":27,"nodeType":"108","messageId":"109","endLine":7,"endColumn":41},{"ruleId":"112","severity":1,"message":"113","line":27,"column":7,"nodeType":"114","endLine":27,"endColumn":35},{"ruleId":"115","severity":1,"message":"116","line":33,"column":13,"nodeType":"117","endLine":33,"endColumn":64},{"ruleId":"118","severity":1,"message":"119","line":33,"column":29,"nodeType":"117","endLine":33,"endColumn":161},{"ruleId":"106","severity":1,"message":"120","line":24,"column":13,"nodeType":"108","messageId":"109","endLine":24,"endColumn":17},{"ruleId":"112","severity":1,"message":"121","line":19,"column":8,"nodeType":"122","endLine":19,"endColumn":10,"suggestions":"123"},{"ruleId":"118","severity":1,"message":"119","line":34,"column":25,"nodeType":"117","endLine":34,"endColumn":100},{"ruleId":"106","severity":1,"message":"120","line":111,"column":9,"nodeType":"108","messageId":"109","endLine":111,"endColumn":13},{"ruleId":"106","severity":1,"message":"124","line":26,"column":8,"nodeType":"108","messageId":"109","endLine":26,"endColumn":11},{"ruleId":"106","severity":1,"message":"125","line":26,"column":13,"nodeType":"108","messageId":"109","endLine":26,"endColumn":19},{"ruleId":"106","severity":1,"message":"126","line":71,"column":7,"nodeType":"108","messageId":"109","endLine":71,"endColumn":20},{"ruleId":"106","severity":1,"message":"120","line":116,"column":9,"nodeType":"108","messageId":"109","endLine":116,"endColumn":13},"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","'faCoffee' is defined but never used.","'faTruckLoading' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'data' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'authorId'. Either include it or remove the dependency array.","ArrayExpression",["127"],"'car' is assigned a value but never used.","'setCar' is assigned a value but never used.","'onInputChange' is assigned a value but never used.",{"desc":"128","fix":"129"},"Update the dependencies array to be: [authorId]",{"range":"130","text":"131"},[620,622],"[authorId]"]